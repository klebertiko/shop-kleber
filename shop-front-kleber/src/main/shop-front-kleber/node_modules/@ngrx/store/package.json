{
  "_args": [
    [
      {
        "raw": "@ngrx/store@^2.2.2",
        "scope": "@ngrx",
        "escapedName": "@ngrx%2fstore",
        "name": "@ngrx/store",
        "rawSpec": "^2.2.2",
        "spec": ">=2.2.2 <3.0.0",
        "type": "range"
      },
      "/home/kleber/Development/projects/java/shop-kleber/shop-front-kleber/src/main/shop-front-kleber"
    ]
  ],
  "_from": "@ngrx/store@>=2.2.2 <3.0.0",
  "_id": "@ngrx/store@2.2.2",
  "_inCache": true,
  "_location": "/@ngrx/store",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/store-2.2.2.tgz_1492654337189_0.5627132400404662"
  },
  "_npmUser": {
    "name": "brandonroberts",
    "email": "robertsbt@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@ngrx/store@^2.2.2",
    "scope": "@ngrx",
    "escapedName": "@ngrx%2fstore",
    "name": "@ngrx/store",
    "rawSpec": "^2.2.2",
    "spec": ">=2.2.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@ngrx/store/-/store-2.2.2.tgz",
  "_shasum": "a00305a6452032a3385886a11ce529dce2dae65b",
  "_shrinkwrap": null,
  "_spec": "@ngrx/store@^2.2.2",
  "_where": "/home/kleber/Development/projects/java/shop-kleber/shop-front-kleber/src/main/shop-front-kleber",
  "author": {
    "name": "Rob Wormald",
    "email": "robwormald@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/ngrx/store/issues"
  },
  "dependencies": {},
  "description": "RxJS powered Redux for Angular2 apps",
  "devDependencies": {
    "@angular/common": "^2.0.0",
    "@angular/compiler": "^2.0.0",
    "@angular/compiler-cli": "^2.0.0",
    "@angular/core": "^2.0.0",
    "@angular/platform-browser": "^2.0.0",
    "@angular/platform-browser-dynamic": "^2.0.0",
    "@angular/platform-server": "^2.0.0",
    "@ngrx/core": "^1.2.0",
    "@types/jasmine": "^2.2.33",
    "@types/node": "^6.0.38",
    "awesome-typescript-loader": "^3.0.0",
    "core-js": "^2.4.1",
    "cpy-cli": "^1.0.1",
    "istanbul-instrumenter-loader": "^0.2.0",
    "jasmine": "^2.5.0",
    "karma": "^1.2.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-coverage": "^1.1.1",
    "karma-jasmine": "^1.0.2",
    "karma-mocha-reporter": "^2.1.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.0",
    "rimraf": "^2.5.4",
    "rollup": "^0.34.13",
    "rxjs": "^5.0.0-beta.11",
    "ts-loader": "^0.8.2",
    "tslint": "^3.15.1",
    "tslint-loader": "^2.1.5",
    "typescript": "^2.0.2",
    "uglifyjs": "^2.4.10",
    "webpack": "^2.1.0-beta.21",
    "zone.js": "^0.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "a00305a6452032a3385886a11ce529dce2dae65b",
    "tarball": "https://registry.npmjs.org/@ngrx/store/-/store-2.2.2.tgz"
  },
  "homepage": "https://github.com/ngrx/store#readme",
  "keywords": [
    "RxJS",
    "Angular2",
    "Redux"
  ],
  "license": "MIT",
  "main": "./bundles/store.umd.js",
  "maintainers": [
    {
      "name": "brandonroberts",
      "email": "robertsbt@gmail.com"
    },
    {
      "name": "mikeryan52",
      "email": "mike.ryan52@gmail.com"
    },
    {
      "name": "ngrxadmin",
      "email": "robwormald@gmail.com"
    },
    {
      "name": "robwormald",
      "email": "rob.wormald@innitapps.com"
    }
  ],
  "module": "./index.js",
  "name": "@ngrx/store",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/core": "^2.0.0 || ^4.0.0",
    "rxjs": "^5.0.0-beta.12",
    "@ngrx/core": "^1.1.0"
  },
  "readme": "# @ngrx/store\nRxJS powered state management for Angular applications, inspired by Redux\n\n[![Join the chat at https://gitter.im/ngrx/store](https://badges.gitter.im/ngrx/store.svg)](https://gitter.im/ngrx/store?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![CircleCI Status for ngrx/store](https://circleci.com/gh/ngrx/store.svg?style=shield&circle-token=aea1fc73de3419cd926fc95e627e036113646fd8\n)](https://circleci.com/gh/ngrx/store)\n[![npm version](https://badge.fury.io/js/%40ngrx%2Fstore.svg)](https://www.npmjs.com/package/@ngrx/store)\n\n@ngrx/store is a controlled state container designed to help write performant, consistent applications\non top of Angular. Core tenets:\n- State is a single immutable data structure\n- Actions describe state changes\n- Pure functions called reducers take the previous state and the next action to compute the new state\n- State accessed with the `Store`, an observable of state and an observer of actions\n\nThese core principles enable building components that can use the `OnPush` change detection strategy\ngiving you [intelligent, performant change detection](http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html#smarter-change-detection)\nthroughout your application.\n\n\n### Installation\nInstall @ngrx/core and @ngrx/store from npm:\n```bash\nnpm install @ngrx/core @ngrx/store --save\n```\n\nOptional packages:\n- [@ngrx/store-devtools](https://github.com/ngrx/store-devtools) instruments your store letting you use a\n[powerful time-travelling debugger](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en).\n- [@ngrx/router-store](https://github.com/ngrx/router-store) keeps the state of @angular/router in your store\n- [@ngrx/effects](https://github.com/ngrx/effects) isolates side effects from your UI by expressing side effects as sources of actions\n\n\n### Examples\n- [Official @ngrx/example-app](https://github.com/ngrx/example-app) is an officially maintained example application showcasing best practices\nfor @ngrx projects, including @ngrx/store and @ngrx/effects\n- [angular-webpack2-starter](https://github.com/qdouble/angular-webpack2-starter) is a complete Webpack 2 starter with built-in support for @ngrx.\nIncludes Ahead-of-Time (AOT) compilation, hot module reloading (HMR), devtools, and server-side rendering.\n\n\n### Introduction\n- [Reactive Angular 2 with ngrx (video)](https://youtu.be/mhA7zZ23Odw)\n- [Comprehensive Introduction to @ngrx/store](https://gist.github.com/btroncone/a6e4347326749f938510)\n- [@ngrx/store in 10 minutes (video)](https://egghead.io/lessons/angular-2-ngrx-store-in-10-minutes)\n- [Build Redux Style Applications with Angular2, RxJS, and ngrx/store (video)](https://egghead.io/courses/building-a-time-machine-with-angular-2-and-rxjs)\n\n\n### Setup\nCreate a reducer function for each data type you have in your application. The combination of these reducers will\nmake up your application state:\n\n```ts\n// counter.ts\nimport { ActionReducer, Action } from '@ngrx/store';\n\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const RESET = 'RESET';\n\nexport function counterReducer(state: number = 0, action: Action) {\n\tswitch (action.type) {\n\t\tcase INCREMENT:\n\t\t\treturn state + 1;\n\n\t\tcase DECREMENT:\n\t\t\treturn state - 1;\n\n\t\tcase RESET:\n\t\t\treturn 0;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n```\n\nIn your app's main module, import those reducers and use the `StoreModule.provideStore(reducers)`\nfunction to provide them to Angular's injector:\n\n```ts\nimport { NgModule } from '@angular/core'\nimport { StoreModule } from '@ngrx/store';\nimport { counterReducer } from './counter';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    StoreModule.provideStore({ counter: counterReducer })\n  ]\n})\nexport class AppModule {}\n```\n\n\nYou can then inject the `Store` service into your components and services. Use `store.select` to\n_select_ slice(s) of state:\n\n```ts\nimport { Store } from '@ngrx/store';\nimport { INCREMENT, DECREMENT, RESET } from './counter';\n\ninterface AppState {\n  counter: number;\n}\n\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<button (click)=\"increment()\">Increment</button>\n\t\t<div>Current Count: {{ counter | async }}</div>\n\t\t<button (click)=\"decrement()\">Decrement</button>\n\n\t\t<button (click)=\"reset()\">Reset Counter</button>\n\t`\n})\nclass MyAppComponent {\n\tcounter: Observable<number>;\n\n\tconstructor(private store: Store<AppState>){\n\t\tthis.counter = store.select('counter');\n\t}\n\n\tincrement(){\n\t\tthis.store.dispatch({ type: INCREMENT });\n\t}\n\n\tdecrement(){\n\t\tthis.store.dispatch({ type: DECREMENT });\n\t}\n\n\treset(){\n\t\tthis.store.dispatch({ type: RESET });\n\t}\n}\n```\n\n\n## Contributing\nPlease read [contributing guidelines here](https://github.com/ngrx/store/blob/master/CONTRIBUTING.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ngrx/store.git"
  },
  "scripts": {
    "build": "npm run build:js && npm run build:umd && npm run build:uglify",
    "build:js": "ngc -p tsconfig.dist.json",
    "build:uglify": "uglifyjs -c --screw-ie8 --comments -o ./release/bundles/store.min.umd.js ./release/bundles/store.umd.js",
    "build:umd": "rollup -c rollup.config.js",
    "clean:post": "rimraf \"src/**/*.ngfactory.ts\"",
    "clean:pre": "rimraf release",
    "copy": "cpy LICENSE package.json README.md release",
    "karma": "karma start --single-run",
    "postbuild": "npm run clean:post && npm run copy",
    "prebuild": "npm run test && npm run clean:pre",
    "test": "npm run test:unit && npm run test:ngc",
    "test:ngc": "ngc -p ./spec/ngc/tsconfig.ngc.json",
    "test:unit": "npm run karma"
  },
  "version": "2.2.2"
}
